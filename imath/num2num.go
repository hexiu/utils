/*
 * @Date: 2021-06-16 11:02:45
 * @LastEditors: jaxiu
 * @LastEditTime: 2021-06-24 15:50:13
 * @FilePath: /utils/imath/num2num.go
 */
package imath

import (
	"errors"
	"math"
)

var CODE [][]string = [][]string{
	[]string{"A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9"},
	[]string{"U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B"},
	[]string{"5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4"},
	[]string{"4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3"},
	[]string{"F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E"},
	[]string{"J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H"},
	[]string{"A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9"},
	[]string{"U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B"},
	[]string{"5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4"},
	[]string{"4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3"},
	[]string{"F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E"},
	[]string{"J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H"},
	[]string{"A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9"},
	[]string{"U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B"},
	[]string{"5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4"},
	[]string{"4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3"},
	[]string{"F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E"},
	[]string{"J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H"},
	[]string{"A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9"},
	[]string{"U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B"},
	[]string{"5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4"},
	[]string{"4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3"},
	[]string{"F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E"},
	[]string{"J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H"},
	[]string{"A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9"},
	[]string{"U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B"},
	[]string{"5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4"},
	[]string{"4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3"},
	[]string{"F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "T", "W", "X", "Y", "Z", "1", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E"},
	[]string{"J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H"},
	[]string{"A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9"},
	[]string{"U", "3", "4", "5", "6", "V", "E", "F", "G", "H", "J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B"},
	[]string{"J", "K", "M", "C", "D", "N", "Q", "L", "P", "R", "S", "1", "W", "X", "Y", "Z", "T", "2", "7", "8", "9", "A", "B", "U", "3", "4", "5", "6", "V", "E", "F", "G", "H"},
}

var length = int64(len(CODE[0]))
var baseId int64 = length*length*length*length*length*1 + 1

func Num2Code(r int64) (code string, err error) {
	if r > math.MaxInt64 {
		return "", errors.New("num is too big. 会出现重复问题")
	}
	n := r + baseId
	var i int
	for n > 0 {
		tmp := n % length
		n /= length
		code += CODE[i][tmp]
		i++
	}
	return
}
